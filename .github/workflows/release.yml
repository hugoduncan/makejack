# A workflow run is made up of one or more jobs that can run
# sequentially or in parallel
on:
  push:
    tags:
      - 'v*'

name: Create Release

jobs:
  # This workflow contains a single job called "build"
  build-linux:
    name: Build linux
    runs-on: ubuntu-latest
    container: oracle/graalvm-ce:20.2.0-java11
    env:
      GRAALVM_HOME: /opt/graalvm-ce-java11-20.2.0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: install native-image
      run: gu install native-image

    - name: install requirements from yum
      run: |
        yum install zip unzip maven -y

    - name: install recent git
      run: |
        yum remove git*
        yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
        yum install git -y

    - name: Install babashka
      run: |
        curl -s https://raw.githubusercontent.com/borkdude/babashka/master/install -o install-babashka
        chmod +x install-babashka
        ./install-babashka

    - name: Install jet
      run: |
        bash -c "$(curl -s https://raw.githubusercontent.com/borkdude/jet/master/install)"

    - name: install clojure
      run: /bin/bash -c "$(curl -fsSL https://download.clojure.org/install/linux-install-1.10.1.561.sh)"

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Compute classpath
      run: clojure -Spath


    - name: Build mj executable
      run: |
        bin/bootstrap-script --verbose --debug
        ./cli/target/mj-script build
        pwd
        ls -l
        ls cli/target
        echo "::set-env name=MAKEJACK_VERSION::$(cli/target/mj --version | jet --query ':version symbol')"
        mkdir -p artifacts
        cd artifacts
        zip --junk-paths makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip ../cli/target/mj


    # - name: Build mj executable
    #   run: bin/bootstrap

    - name: Set version
      run: echo "::set-env name=MAKEJACK_VERSION::$(cli/target/mj --version | jet --query ':version symbol')"

    - name: Create linux artifacts
      run: |
        pwd
        ls cli/target
        mkdir -p artifacts
        cd artifacts
        zip --junk-paths makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip ../cli/target/mj
    - name: Upload linux artifact
      uses: actions/upload-artifact@v2
      with:
        name: makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip
        path: artifacts/makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip
        if-no-files-found: error


  build-macos:
    name: Build Mac
    # The type of runner that the job will run on
    runs-on: macos-latest
    env:
      GRAALVM_HOME: /Users/runner/graalvm-ce-java11-20.2.0/Contents/Home

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: install GraalVM
      run: |
        cd ~
        pwd
        curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-darwin-amd64-20.2.0.tar.gz
        tar xzf graalvm-ce-java11-darwin-amd64-20.2.0.tar.gz
        ls -la
        ls -la graalvm-ce-java11-20.2.0
        ls -la graalvm-ce-java11-20.2.0/Contents
        ls -la graalvm-ce-java11-20.2.0/Contents/Home

    - name: install native-image
      run: ${GRAALVM_HOME}/bin/gu install native-image

    - name: Install jet
      run: |
        bash <(curl -s https://raw.githubusercontent.com/borkdude/jet/master/install)

    - name: Install babashka
      run: |
        curl -s https://raw.githubusercontent.com/borkdude/babashka/master/install -o install-babashka
        chmod +x install-babashka
        sudo ./install-babashka

    - name: install clojure
      run: |
        install_dir=${1:-/usr/local}
        mkdir -p "$install_dir"
        cd /tmp
        curl -O -sL https://download.clojure.org/install/clojure-tools-1.10.1.561.tar.gz
        tar xzf clojure-tools-1.10.1.561.tar.gz
        cd clojure-tools
        clojure_lib_dir="$install_dir/lib/clojure"
        mkdir -p "$clojure_lib_dir/libexec"
        cp ./*.jar "$clojure_lib_dir/libexec"
        cp deps.edn "$clojure_lib_dir"
        cp example-deps.edn "$clojure_lib_dir"

        sed -i -e 's@PREFIX@'"$clojure_lib_dir"'@g' clojure
        mkdir -p "$install_dir/bin"
        cp clojure "$install_dir/bin"
        cp clj "$install_dir/bin"

        cd /tmp
        rm -rf clojure-tools-1.10.1.561.tar.gz
        rm -rf clojure-tools
        echo "Installed clojure to $install_dir/bin"

    - uses: actions/checkout@v2

    - name: Build mj executable
      run: |
        bin/bootstrap-script --verbose --debug
        ./cli/target/mj-script build

    # - name: Build mj jar
    #   run: cli/target/mj jar

    - name: Set version
      run: echo "::set-env name=MAKEJACK_VERSION::$(cli/target/mj --version | jet --query ':version symbol')"

    - name: Create mac artifacts
      run: |
        ls -l
        ls -l cli/target
        mkdir -p artifacts
        cd artifacts
        zip --junk-paths makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip ../cli/target/mj
    - name: Upload macos artifact
      uses: actions/upload-artifact@v2
      with:
        name: makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip
        path: artifacts/makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip
        if-no-files-found: error
    - name: Upload API jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: makejack.api-${{ env.MAKEJACK_VERSION }}.jar
        path: api/target/makejack.api-${{ env.MAKEJACK_VERSION }}.jar
        if-no-files-found: error
    - name: Upload tools jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: makejack.tools-${{ env.MAKEJACK_VERSION }}.jar
        path: tools/target/makejack.tools-${{ env.MAKEJACK_VERSION }}.jar
        if-no-files-found: error
    - name: Upload mj artifact
      uses: actions/upload-artifact@v2
      with:
        name: mj
        path: cli/target/mj
        if-no-files-found: error

  release:
    name: Create Release
    runs-on: macos-latest
    needs: [build-linux, build-macos]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install jet
      run: |
        bash <(curl -s https://raw.githubusercontent.com/borkdude/jet/master/install)

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Download mj artifact
      uses: actions/download-artifact@v2
      with:
        name: mj

    - name: Set version
      run: |
        ls -l
        chmod +x ./mj
        echo "::set-env name=MAKEJACK_VERSION::$(./mj --version | jet --query ':version symbol')"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true

    - name: Download API jar artifact
      uses: actions/download-artifact@v2
      with:
        name: makejack.api-${{ env.MAKEJACK_VERSION }}.jar

    - name: Download tools jar artifact
      uses: actions/download-artifact@v2
      with:
        name: makejack.tools-${{ env.MAKEJACK_VERSION }}.jar

    - name: Download linux artifact
      uses: actions/download-artifact@v2
      with:
        name: makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip

    - name: Download macos artifact
      uses: actions/download-artifact@v2
      with:
        name: makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip

      # This pulls from the CREATE RELEASE step above, referencing
      # it's ID to get its outputs object, which include a
      # `upload_url`. See this blog post for more info:
      # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    - name: Upload API Jar
      id: upload-release-asset-api-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: makejack.api-${{ env.MAKEJACK_VERSION }}.jar
        asset_name: makejack.api-${{ env.MAKEJACK_VERSION }}.jar
        asset_content_type: application/java-archive
    - name: Upload tools Jar
      id: upload-release-asset-tools-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: makejack.tools-${{ env.MAKEJACK_VERSION }}.jar
        asset_name: makejack.tools-${{ env.MAKEJACK_VERSION }}.jar
        asset_content_type: application/java-archive
    - name: Upload linux
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip
        asset_name: makejack-${{ env.MAKEJACK_VERSION }}-linux-amd64.zip
        asset_content_type: application/zip
    - name: Upload macos
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip
        asset_name: makejack-${{ env.MAKEJACK_VERSION }}-macos-amd64.zip
        asset_content_type: application/zip
