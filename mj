#!/usr/bin/env bb

;; Standalone script for running makejack.

;; By default, uses makejack's built in tasks, or tasks from build.clj if it
;; exists.

;; To use tasks from a different namespace,
;; pass `--tasks <path-to-ns-defining-file>`.


(require '[babashka.fs :as fs])
(require '[babashka.deps :as deps])
(require '[babashka.pods :as pods])

(deps/add-deps '{:deps
                 {org.clojure/tools.namespace
                  {:git/url "https://github.com/babashka/tools.namespace"
                   :git/sha "3625153ee66dfcec2ba600851b5b2cbdab8fae6c"}}})


(deps/add-deps '{:deps
                 {io.github.clojure/tools.build
                  {:git/url    "https://github.com/babashka/tools.bbuild"
                   :git/sha    "931e22644308bffae6d3e2ed741e850ed6db708d"
                   :exclusions [org.clojure/tools.namespace]}}})

(pods/load-pod 'org.babashka/tools-deps-native "0.0.5")
(require 'spartan.spec)
(require 'clojure.tools.build.api)
(require 'clojure.tools.deps.alpha)

(deps/add-deps
 '{:deps {io.github.hugoduncan/makejack
          {:git/sha    "6966696979c9b9c0c97e54f82a5d4096e4105240"
           :deps/root  "projects/makejack-jar"
           :exclusions [io.github.clojure/tools.build]}}})

(defn parse-namespace [path]
  (-> (clojure.edn/read-string (slurp path))
      second))

(defn read-or-identity [x]
  (try (edn/read-string x)
       (catch Exception _
         x)))

(defn parse-opts []
  (let [args             *command-line-args*
        [args task-file] (cond
                           (= "--tasks" (first args))
                           [(drop 2 args) (second args)]

                           (fs/exists? "build.clj")
                           [args "build.clj"]

                           :else
                           [args nil])
        ns-str (if task-file
                 (or (some->
                      (parse-namespace task-file)
                      str)
                     (assert false "Task file must contain a ns form"))
                 "makejack.tasks")
        f      (symbol (or (first args) "help"))
        f      (if (namespace f) f (symbol ns-str (name f)))
        ns-str (namespace f)]
    {:task-file task-file
     :ns-str    ns-str
     :f         f
     :args      (into {} (->> args
                              rest
                              (mapv read-or-identity)
                              (partition 2)
                              (mapv vec)))}))


(let [{:keys [task-file ns-str f args]} (parse-opts)]
  (if task-file
    (load-file task-file)
    (require 'makejack.tasks))
  (require (symbol ns-str))
  ((resolve f) args))

nil
